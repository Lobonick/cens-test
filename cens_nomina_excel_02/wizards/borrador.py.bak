

            for row in range(9, sheet_nomina.nrows):
                record_id = int(sheet_nomina.cell_value(row, headers_nomina.index('id')))
                payslip = self.env['hr.payslip'].browse(record_id)        
                
                if not payslip.exists():
                    raise UserError(_('No se encontró la nómina con ID: %s') % record_id)

                # Preparar valores a actualizar
                values = {}
                for col, header in enumerate(headers_nomina):
                    if header != 'id' and header in payslip._fields:
                        value = sheet_nomina.cell_value(row, col)
                        field_type = payslip._fields[header].type
                        
                        # Convertir tipos de datos según el campo
                        if field_type == 'many2one':
                            # Buscar el registro relacionado por nombre
                            related_model = payslip._fields[header].comodel_name
                            related_record = self.env[related_model].search(
                                [('name', '=', value)], limit=1
                            )
                            if related_record:
                                value = related_record.id
                        elif field_type == 'date':
                            # Convertir fecha de Excel a formato Odoo
                            value = xlrd.xldate.xldate_as_datetime(
                                value, book.datemode
                            ).date()
                        
                        values[header] = value

                # Actualizar registro
                payslip.write(values)
            


        # --------------------------------
        #   SUGERIDO
        # --------------------------------

            for row in range(9, sheet_nomina.nrows):
                try:
                    # Obtener el ID con validación adicional
                    id_column = headers_nomina.index('id')
                    raw_id_value = sheet_nomina.cell_value(row, id_column)
                    
                    # Verificar que sea un valor numérico válido
                    if isinstance(raw_id_value, (int, float)):
                        record_id = int(raw_id_value)
                    else:
                        raise UserError(_('ID inválido en la fila %s: %s') % (row + 1, raw_id_value))
                    
                    # Buscar el registro directamente por ID y verificar que exista
                    payslip = self.env['hr.payslip'].browse(record_id)
                    
                    if not payslip.exists():
                        raise UserError(_('No se encontró la nómina con ID: %s en la fila %s') % (record_id, row + 1))
                    
                    # Verificar que el ID sea correcto antes de actualizar
                    if payslip.id != record_id:
                        raise UserError(_('Error de integridad de datos: El ID leído (%s) no coincide con el ID del registro encontrado (%s)') % (record_id, payslip.id))
                    
                    # Limpiar caché para evitar problemas
                    self.env['hr.payslip'].invalidate_cache()
                    
                    # Preparar valores a actualizar
                    values = {}
                    for col, header in enumerate(headers_nomina):
                        if header != 'id' and header in payslip._fields:
                            cell_value = sheet_nomina.cell_value(row, col)
                            field_type = payslip._fields[header].type
                            
                            # Convertir tipos de datos según el campo
                            if field_type == 'many2one':
                                related_model = payslip._fields[header].comodel_name
                                related_record = self.env[related_model].search(
                                    [('name', '=', cell_value)], limit=1
                                )
                                if related_record:
                                    values[header] = related_record.id
                            elif field_type == 'date' and isinstance(cell_value, float):
                                values[header] = xlrd.xldate.xldate_as_datetime(
                                    cell_value, book.datemode
                                ).date()
                            elif field_type == 'boolean':
                                # Manejar conversiones booleanas
                                values[header] = bool(cell_value)
                            elif field_type == 'float':
                                values[header] = float(cell_value)
                            elif field_type == 'integer':
                                values[header] = int(cell_value)
                            else:
                                values[header] = cell_value
                    
                    # Registrar valores para depuración
                    _logging.info(f"Actualizando registro ID: {record_id} con valores: {values}")
                    
                    # Actualizar registro usando método write con commit inmediato
                    payslip.write(values)
                    self.env.cr.commit()
                    
                except Exception as e:
                    self.env.cr.rollback()
                    raise UserError(_('Error procesando fila %s: %s') % (row + 1, str(e)))
    
